#!/bin/bash
set -euo pipefail  # Exit on errors and undefined variables

# --------------------------
# Start timer
# --------------------------
start_time=$(date +%s)

# --------------------------
# CI Environment or Local excecution
# --------------------------
if [ "${IS_CI:-false}" = "TRUE" ]; then
    echo "Running in CI environment"
else
    # --------------------------
    # Choose operating mode
    # --------------------------
    echo "How do you want to proceed?"
    echo "  [1]  Create a copy and make changes on that (safe mode)"
    echo "  [2]  Make changes to the existing database"
    read -p "Enter your choice [1]: " mode_choice

    # Default to safe mode (1) if user enters nothing
    mode_choice=${mode_choice:-1}

    if [ "$mode_choice" != "1" ] && [ "$mode_choice" != "2" ]; then
        echo "‚ùå Invalid choice. Aborting."
        exit 1
    fi

    # If user chooses to modify existing database, ask for confirmation
    if [ "$mode_choice" = "2" ]; then
        echo
        echo "‚ö†Ô∏è  WARNING: This will delete all content in the default database! ‚ö†Ô∏è"
        echo "‚è≥ Press Ctrl+C to cancel if you do not wish to proceed."
        echo
        read -p "üîë Type 'I Agree' to continue: " user_input

        if [ "$user_input" != "I Agree" ]; then
            echo "‚ùå Incorrect agreement. Aborting."
            exit 1
        fi
    fi

    # --------------------------
    # Configuration
    # --------------------------
    DB_FILE="thin-db.sql"
    WORKDIR="/var/www/html"  # DDEV web container's docroot

    # Define patterns for tables to truncate
    TRUNCATE_PATTERNS=(
      "^node"
      "^media"
      "^taxonomy_term"
      "^feeds"
      "^path_alias"
      "^content_moderation"
      "^crop"
      "^cache_"
      "^redirect"
      "file_managed$"
      "s3fs_file$"
      "search_api_item$"
      "admin_audit_trail$"
      "taxonomy_index$"
      "file_usage$"
      "simple_sitemap$"
      "batch$"
    )

    # Get original database details
    ORIGINAL_DB=$(drush sql:connect --database=default | sed -n 's/.*--database=\([^ ]*\).*/\1/p')
    DRUSH_ARGS=""

    if [ "$mode_choice" = "1" ]; then
        # Create a copy of the database using DDEV's mysql command
        TARGET_DB="${ORIGINAL_DB}_thin"
        echo "Creating working copy of database..."

        # Add db_copy configuration to settings.ddev.php
        SETTINGS_FILE="docroot/sites/default/settings.ddev.php"
        DB_COPY_CONFIG=$(cat <<EOF

// Automatically added by thin-db-export script - START
\$databases['${TARGET_DB}']['default'] = [
  'database' => '${TARGET_DB}',
  'username' => 'db',
  'password' => 'db',
  'host' => 'db',
  'port' => '3306',
  'driver' => 'mysql',
];
// Automatically added by thin-db-export script - END
EOF
)

        # Backup original file and append configuration
        if [ -f "$SETTINGS_FILE" ]; then
            cp "$SETTINGS_FILE" "${SETTINGS_FILE}.bak"
            echo "$DB_COPY_CONFIG" >> "$SETTINGS_FILE"
            echo "‚úÖ Added ${TARGET_DB} configuration to settings.ddev.php"
        else
            echo "‚ùå Error: settings.ddev.php not found!"
            exit 5
        fi

        # Create temporary SQL file for database creation
        TEMP_SQL="/tmp/create_db.sql"
        echo "DROP DATABASE IF EXISTS ${TARGET_DB}; CREATE DATABASE ${TARGET_DB};" > "$TEMP_SQL"

        # Use mysql root user to create the database
        mysql -uroot -proot < "$TEMP_SQL"
        rm "$TEMP_SQL"

        # Grant privileges to the 'db' user
        mysql -uroot -proot -e "GRANT ALL PRIVILEGES ON ${TARGET_DB}.* TO 'db'@'%';"

        # Copy the complete structure first
        echo "Copying database structure..."
        STRUCTURE_FILE="/tmp/db_structure.sql"
        drush sql:dump \
            --extra="--skip-comments --skip-dump-date --no-data" \
            --result-file="$STRUCTURE_FILE"

        # Import the structure to the new database
        drush sql:query --database="${TARGET_DB}" --file="$STRUCTURE_FILE"
        rm -f "$STRUCTURE_FILE"

        # Copy only the essential data (excluding content tables)
        echo "Copying essential data..."

        # Disable foreign key checks for data copy
        drush sql:query --database="${TARGET_DB}" "SET FOREIGN_KEY_CHECKS=0;"

        # First handle users and related tables in the correct order
        CORE_TABLES=(
            "users"
            "users_field_data"
            "user__roles"
            "user__user_picture"
            "user__field_pending_expire_sent"
            "user__field_password_expiration"
        )

        for table in "${CORE_TABLES[@]}"; do
            echo "Copying core table: $table"
            drush sql:query --database="${TARGET_DB}" "TRUNCATE TABLE \`${table}\`;"
            drush sql:query "REPLACE INTO ${TARGET_DB}.$table SELECT * FROM ${ORIGINAL_DB}.$table"
        done

        # Then copy remaining tables
        TABLES_TO_COPY=$(drush sql:query "
            SELECT TABLE_NAME
            FROM information_schema.TABLES
            WHERE TABLE_SCHEMA = '${ORIGINAL_DB}'
            AND TABLE_NAME NOT REGEXP '^(node|media|taxonomy_term|feeds|path_alias|content_moderation|crop|cache|redirect)'
            AND TABLE_NAME NOT IN (
                'file_managed', 's3fs_file', 'search_api_item', 'admin_audit_trail',
                'taxonomy_index', 'file_usage', 'simple_sitemap', 'batch',
                'users', 'users_field_data', 'user__roles', 'user__user_picture',
                'user__field_pending_expire_sent', 'user__field_password_expiration'
            )
        ")

        for table in $TABLES_TO_COPY; do
            echo "Copying table: $table"
            drush sql:query --database="${TARGET_DB}" "TRUNCATE TABLE \`${table}\`;"
            drush sql:query "INSERT INTO ${TARGET_DB}.$table SELECT * FROM ${ORIGINAL_DB}.$table"
        done

        # Re-enable foreign key checks
        drush sql:query --database="${TARGET_DB}" "SET FOREIGN_KEY_CHECKS=1;"

        DRUSH_ARGS="--database=${TARGET_DB}"
        echo "‚úÖ Database copy created successfully."
    fi

    # --------------------------
    # Delete All Content
    # --------------------------
    echo "üóëÔ∏è  Deleting all content..."

    # Disable foreign key checks
    drush sql:query $DRUSH_ARGS "SET FOREIGN_KEY_CHECKS=0;"

    # Get the target database name based on mode
    DB_NAME=$([ "$mode_choice" = "1" ] && echo "$TARGET_DB" || echo "$ORIGINAL_DB")

    # Truncate tables using improved pattern matching
    for pattern in "${TRUNCATE_PATTERNS[@]}"; do
      echo "Truncating tables matching: ${pattern}"
      drush sql:query $DRUSH_ARGS "SELECT TABLE_NAME FROM information_schema.TABLES WHERE TABLE_SCHEMA = '${DB_NAME}' AND TABLE_NAME REGEXP '${pattern}'" \
        | grep -v '^TABLE_NAME$' \
        | while read -r table; do
          [ -z "${table}" ] && continue
          echo "Truncating ${table}"
          drush sql:query $DRUSH_ARGS "TRUNCATE TABLE \`${table}\`;"
        done
    done

    # --------------------------
    # Additional Cleanup
    # --------------------------
    echo "üßπ Cleaning rebuildable data..."
    drush sql:query $DRUSH_ARGS "
      TRUNCATE cachetags;
      TRUNCATE cache_entity;
      TRUNCATE cache_menu;
      TRUNCATE cache_render;
      TRUNCATE cache_data;
      DELETE FROM key_value WHERE collection IN (
        'pathauto_state.media',
        'pathauto_state.node',
        'pathauto_state.taxonomy_term',
        'pathauto_state.user'
      );
    "

    # Re-enable foreign key checks
    drush sql:query $DRUSH_ARGS "SET FOREIGN_KEY_CHECKS=1;"

    # --------------------------
    # Sanitize Users
    # --------------------------
    echo "üë§ Deleting users..."
    drush sql:query $DRUSH_ARGS "
        DELETE FROM users_field_data WHERE uid != 1;
        DELETE FROM users WHERE uid != 1;
        DELETE FROM user__roles WHERE entity_id != 1;
        DELETE FROM user__user_picture WHERE entity_id != 1;
        DELETE FROM user__field_pending_expire_sent WHERE entity_id != 1;
        DELETE FROM user__field_password_expiration WHERE entity_id != 1;
    "

    # --------------------------
    # Export Database
    # --------------------------
    echo "üì¶ Exporting database..."

    # Generate precise exclusion list
    EXCLUDED_TABLES=$(drush sql:query $DRUSH_ARGS "
      SELECT GROUP_CONCAT(TABLE_NAME SEPARATOR ',')
      FROM information_schema.TABLES
      WHERE TABLE_SCHEMA = '${DB_NAME}'
        AND TABLE_NAME IN (
          'node',
          'node_field_data',
          'node__body',
          'media',
          'taxonomy_term_data',
          'taxonomy_term_field_data',
          'feeds_feed',
          'path_alias',
          'content_moderation_state',
          'crop',
          'cache',
          'cache_bootstrap',
          'cache_config',
          'cache_container',
          'cache_data',
          'cache_default',
          'cache_discovery',
          'cache_dynamic_page_cache',
          'cache_entity',
          'cache_menu',
          'cache_render',
          'cache_toolbar',
          'redirect',
          'file_managed',
          's3fs_file',
          'search_api_item',
          'admin_audit_trail',
          'taxonomy_index',
          'file_usage',
          'simple_sitemap',
          'batch'
        )
    ")

    drush sql:dump $DRUSH_ARGS \
      --structure-tables-list="${EXCLUDED_TABLES}" \
      --ordered-dump \
      --extra="--skip-comments --skip-dump-date --single-transaction --no-tablespaces" \
      --result-file="${WORKDIR}/${DB_FILE}"

    # --------------------------
    # Compress and Verify
    # --------------------------
    echo "üóúÔ∏è  Compressing..."
    cd "${WORKDIR}"
    gzip -9 "${DB_FILE}"

    mkdir -p "${WORKDIR}/backups/"
    mv "${DB_FILE}.gz" "${WORKDIR}/backups/"

    echo "‚úÖ Done! Final file: ${WORKDIR}/backups/${DB_FILE}.gz"
    echo "File size: $(du -h ${WORKDIR}/backups/${DB_FILE}.gz | cut -f1)"

    # Cleanup
    if [ "$mode_choice" = "1" ]; then
        echo "Cleaning up..."

        # Remove database configuration from settings.ddev.php
        SETTINGS_FILE="docroot/sites/default/settings.ddev.php"
        if [ -f "$SETTINGS_FILE" ]; then
            # Use sed to delete the added block
            sed -i '/\/\/ Automatically added by thin-db-export script - START/,/\/\/ Automatically added by thin-db-export script - END/d' "$SETTINGS_FILE"

            # Remove backup file
            rm -f "${SETTINGS_FILE}.bak"

            echo "‚úÖ Removed ${TARGET_DB} configuration from settings.ddev.php"
        else
            echo "‚ö†Ô∏è  settings.ddev.php not found during cleanup"
        fi

        # Drop the temporary database
        echo "Cleaning up temporary database..."
        drush sql:query "DROP DATABASE ${TARGET_DB}"
    fi

fi

# --------------------------
# End timer and report duration
# --------------------------
end_time=$(date +%s)
duration=$((end_time - start_time))

echo "Completed in ${duration} seconds"